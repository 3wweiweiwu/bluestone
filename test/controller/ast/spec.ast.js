const AST = require('../../../controller/ast')
const path = require('path')
const fs = require('fs')
const acorn = require("acorn");
const assert = require('assert');
describe('AST class', () => {
    it('should get require inforamtion correctly', async () => {
        let funcPath = path.join(__dirname, '../../sample-project/bluestone-func.js')
        let locatorPath = path.join(__dirname, '../../sample-project/bluestone-locator.js')
        let astSummary = new AST(locatorPath, funcPath)
        let jsStr = fs.readFileSync(funcPath).toString()
        let ast = acorn.parse(jsStr)
        let jsDocSummary = await astSummary.__getRequireInfo(ast)
        assert.deepEqual(jsDocSummary.repo.length, 2)
    })
    it('should extract current function library and method name', async () => {
        let funcPath = path.join(__dirname, '../../sample-project/bluestone-func.js')
        let locatorPath = path.join(__dirname, '../../sample-project/bluestone-locator.js')
        let astSummary = new AST(locatorPath, funcPath)
        let jsStr = fs.readFileSync(funcPath).toString()
        let ast = acorn.parse(jsStr)
        let jsDocSummary = await astSummary.__getBsFuncInfo(ast, 'logConsole')
        assert.deepEqual(jsDocSummary.libraryName, 'func')
        assert.deepEqual(jsDocSummary.methodName, 'LogConsole')
    })
    it('should create function repo with sorted tag info', async () => {
        let funcPath = path.join(__dirname, '../../sample-project/bluestone-func.js')
        let locatorPath = path.join(__dirname, '../../sample-project/bluestone-locator.js')
        let astSummary = new AST(locatorPath, funcPath)
        await astSummary.loadFunctions()
        assert.deepEqual(astSummary.funcRepo[0].name, 'LogConsole')
        assert.deepEqual(astSummary.funcRepo[0].description, 'Log Result')
        assert.deepEqual(astSummary.funcRepo[0].locators.length, 2)
        assert.deepEqual(astSummary.funcRepo[0].params.length, 4)
        assert.deepEqual(astSummary.funcRepo[0].params[0].name, 'browser')
        assert.deepEqual(astSummary.funcRepo[0].params[1].name, 'page')
        assert.deepEqual(astSummary.funcRepo[0].params[2].name, 'text1')
        assert.deepEqual(astSummary.funcRepo[0].params[3].name, 'text2')
    })
})
